# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

jobs:

  build:

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if a previous Continuous build is available
      shell: sh
      run: |
        if git show-ref --tags --verify --quiet "refs/tags/continuous"; then
          echo "Tag continuous exists"
          CONT=1
        else
          echo "Tag continuous does not exist"
          CONT=0
        fi
        echo "CONT=$CONT" >> $GITHUB_ENV

    - name: Remove Previous Continuous Release Build
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'dot166/jLib' && env.CONT == '1' }}
      shell: sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release view "continuous" && gh release delete "continuous" -y --cleanup-tag

    - name: Check if Release build
      shell: sh
      run: |
        VERSION=v$(cat jLib/Version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        RELEASE=0 && git show-ref --tags --verify --quiet "refs/tags/$VERSION" || RELEASE=1
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore .

    - name: Build Debug
      run: dotnet Build -c Debug

    - name: Build Release
      run: dotnet Build -c Release

    - name: Copy Release and Debug .dll files into Root Directory
      shell: sh
      run: |
        echo "Copying Debug"
        cp jLib/bin/Debug/net8.0/jLib.dll ./jLib-Debug.dll
        echo "DONE!"

        echo "Copying Release"
        cp jLib/bin/Release/net8.0/jLib.dll ./jLib-Release.dll
        echo "DONE!"

    - name: Upload to new Stable Release
      uses: softprops/action-gh-release@v2
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'dot166/jLib' && env.RELEASE == '1' }}
      with:
        tag_name: ${{ env.VERSION }}
        make_latest: true
        generate_release_notes: true
        files: |
          jLib-Debug.dll
          jLib-Release.dll

    - name: Upload to Continuous Release
      uses: softprops/action-gh-release@v2
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'dot166/jLib' && env.RELEASE == '0' }}
      with:
        tag_name: continuous
        name: Continuous preview build
        prerelease: true
        generate_release_notes: true
        files: |
          jLib-Debug.dll
          jLib-Release.dll
