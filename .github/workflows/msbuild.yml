# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build Debug
      if: ${{ $(git show-ref --tags --verify --quiet "refs/tags/$(cat jLib/Version)") }}
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=Debug ${{env.SOLUTION_FILE_PATH}}

    - name: Upload Debug Build to Continuous Release
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'dot166/jLib' && $(git show-ref --tags --verify --quiet "refs/tags/$(cat jLib/Version)") }}
      shell: sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -fLOSs --retry 2 --retry-delay 60 https://github.com/probonopd/uploadtool/raw/master/upload.sh
        sh upload.sh x64/Debug/jLib.dll x64/Debug/jLib.lib jLib/jLib.h

    - name: Build Release
      if: ${{ $(git show-ref --tags --verify --quiet "refs/tags/$(cat jLib/Version)") != 0 }}
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=Release ${{env.SOLUTION_FILE_PATH}}

    - name: Upload Release Build
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'dot166/jLib' && { $(git show-ref --tags --verify --quiet "refs/tags/$(cat jLib/Version)") != 0 } }}
      shell: bash
      run: |          
        VERSION=v$(cat jLib/Version)

        GH=gh_2.21.1_windows_amd64/bin/gh.exe
        wget https://github.com/cli/cli/releases/download/v2.21.1/gh_2.21.1_windows_amd64.zip
        tar -xf gh_2.21.1_windows_amd64.zip

        echo ${{ secrets.GITHUB_TOKEN }} | $GH auth login --with-token

        $GH release create $VERSION --notes-file note -d

        # dll
        echo "::group::-------- jLib.dll"
        echo Uploading jLib.dll
        $GH release upload $VERSION x64/Release/jLib.dll
        echo "::endgroup::"

        # lib
        echo "::group::-------- jLib.lib"
        echo Uploading jLib.lib
        $GH release upload $VERSION x64/Release/jLib.lib
        echo "::endgroup::"

        # header
        echo "::group::-------- jLib.h"
        echo Uploading jLib.h
        $GH release upload $VERSION jLib/jLib.h
        echo "::endgroup::"

        $GH release edit $VERSION -t $VERSION

        if [ $IS_DRAFT == "false" ]; then
          $GH release edit $VERSION --draft=false
        fi
